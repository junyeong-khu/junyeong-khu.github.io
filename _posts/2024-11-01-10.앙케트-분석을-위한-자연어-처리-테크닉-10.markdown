---
layout: post
title: "파이썬 데이터분석 실무 테크닉 100 : 10. 앙케트 분석을 위한 자연어 처리 테크닉 10"
date: 2024-11-01 03:01:45 +0900
categories: 파이썬_데이터분석_실무_테크닉_100
---
## <span style= 'background-color: #f1f8ff'>고객의 소리
🗣️ 우리 회사는 오랫동안 이 도시에서 부동산업을 경영했습니다. 덕분에 정부 기관과의 유대감도 깊어서 부동산 업자의 관점에서 도시 건설 제안을 의뢰받는 경우가 있습니다. 그래서 우리 회사와 관계있는 고객과 동업자에게 협조를 받아 설문조사를 했습니다. 예상외로 많은 사람이 협력해주셔서 전부 눈으로 훑어보기도 어려운 상황이 되어 버렸습니다. 조금만 읽어봐도 유익한 정보가 많아 AI를 사용해 분석했으면 합니다. 이런 게 가능할까요? 가능하다면 알기 쉽게 보고서를 작성해주면 정부 기관에 제안하기 쉬울 것 같습니다.


## <span style= 'background-color: #f1f8ff'>10-0: 전제조건
💡 캠페인 기간(2019년 1월~4월)의 4개월 동안 모은 고객만족도 설문조사 데이터가 데이터베이스에 기록돼 있습니다. 이 정보를 활용해서 고객만족도 향상에 활용하려고 합니다. 여기서 다룰 데이터에는 설문조사를 한 날짜, 의견, 만족도(5단 평가)의 결과가 들어 있습니다.
![image](https://github.com/user-attachments/assets/a1d3f61c-a4fb-411a-be7a-fca5eee8004b)


## <span style= 'background-color: #f1f8ff'>10-1: 데이터를 불러서 파악해 보자
🗃️ 데이터 리딩
```python
import pandas as pd
survey = pd.read_csv("survey.csv")
print(len(survey))
survey.head()
```
![image](https://github.com/user-attachments/assets/aff135d8-6736-462d-b9a6-b3528b3aa6af)

🗃️ 결측치 제거: 결측치를 확인한 결과 2개 밖에 존재하지 않아 제거.
```python
survey = survey.dropna()
survey.isna().sum()
```
![image](https://github.com/user-attachments/assets/17e6de4b-790a-4101-a98c-c6f3f90da4e1)


## <span style= 'background-color: #f1f8ff'>10-2: 불필요한 문자를 제거하자
🗃️ 불필요한 문자 제거: 정규 표현식을 활용하여 불필요한 문자를 제거.
```python
survey["comment"] = survey["comment"].str.replace("\(.+?\)", "")
survey.head()
```
![image](https://github.com/user-attachments/assets/4d1ae991-78d3-4e28-9152-17cb8fa6082c)


🔎 괄호 안의 문장이 보조적이기에 괄호를 통째로 제거. 


## <span style= 'background-color: #f1f8ff'>10-3: 문자 수를 세어 히스토그램으로 표시해 보자
🗃️ 문자 수 세기
```python
survey["length"] = survey["comment"].str.len()
survey.head()
```
![image](https://github.com/user-attachments/assets/e44d08a9-920b-45cf-aec1-9b201794dfb1)


🗃️ 히스토그램 작성
```python
import matplotlib.pyplot as plt
%matplotlib inline
plt.hist(survey["length"])
```
![image](https://github.com/user-attachments/assets/ee9bbf4a-7c97-43c9-87cb-89b9072e9698)


## <span style= 'background-color: #f1f8ff'>10-4: 형태소 분석으로 문장을 분해해 보자
🗃️ 형태소 분석: konlpy를 이용해 분석.
```python
from konlpy.tag import Twitter
twt = Twitter()
text = "형태소분석으로 문장을 분해해보자"
tagging = twt.pos(text)
tagging
```
[('형태소', 'Noun'),\
 ('분석', 'Noun'),\
 ('으로', 'Josa'),\
 ('문장', 'Noun'),\
 ('을', 'Josa'),\
 ('분해', 'Noun'),\
 ('해보자', 'Verb')]


🗃️ 단어만 저장: 품사는 필요 없음.
```python
words = txt.pos(text)
words_arr = []
for i in words:
    if i == 'EOS': continue
    word_tmp = i[0]
    words_arr.append(word_tmp)
words_arr
```
['형태소', '분석', '으로', '문장', '을', '분해', '해보자']


## <span style= 'background-color: #f1f8ff'>10-5: 형태소 분석으로 문장에서 '동사', '명사'를 추출해 보자
🗃️ 동사, 명사 추출
```python
text = "형태소분석으로 문장을 분해해보자"
words_arr = []
parts = ["Noun", "Verb"]
words = twt.pos(text)
words_arr = []
for i in words:
    if i == 'EOS' or i == '': continue
    word_tmp = i[0]
    part = i[1]
    if not (part in parts):continue
    words_arr.append(word_tmp)
words_arr
```
['형태소', '분석', '문장', '분해', '해보자']


🔎 설문 결과에서 어떤 단어가 사용됐을 때 만족도가 높은지를 살펴볼 예정. 명사만으로도 그 문장이 무엇을 서술하고 있는지를 특정 지을 수 있기에 명사만을 이용하여 분석.


## <span style= 'background-color: #f1f8ff'>10-6: 형태소 분석으로 자주 나오는 명사를 확인해 보자
🗃️ 형태소 분석
```python
all_words = []
parts = ["Noun"]
for n in range(len(survey)):
    text = survey["comment"].iloc[n]
    words = twt.pos(text)
    words_arr = []
    for i in words:
        if i == "EOS" or i == "": continue
        word_tmp = i[0]
        part = i[1]
        if not (part in parts):continue
        words_arr.append(word_tmp)
    all_words.extend(words_arr)
print(all_words)
```
![image](https://github.com/user-attachments/assets/68af23dc-a392-44ca-b040-80a6a8a2b2cd)


🗃️ 단어별 빈도수 확인
```python
all_words_df = pd.DataFrame({"words":all_words, "count":len(all_words)*[1]})
all_words_df = all_words_df.groupby("words").sum()
all_words_df.sort_values("count",ascending=False).head()
```
![image](https://github.com/user-attachments/assets/702bac1c-09ec-49df-8818-cb443a3fa55f)


🔎 불필요한 단어가 포함된 것을 알 수 있음.


## <span style= 'background-color: #f1f8ff'>10-7: 관계없는 단어를 제거해 보자
🗃️ 관계없는 단어 제거
```python
stop_words = ["더","수","좀"]
all_words = []
parts = ["Noun"]
for n in range(len(survey)):
    text = survey["comment"].iloc[n]
    words = twt.pos(text)
    words_arr = []
    for i in words:
        if i == "EOS" or i == "": continue
        word_tmp = i[0]
        part = i[1]
        if not (part in parts):continue
        if word_tmp in stop_words:continue
        words_arr.append(word_tmp)
    all_words.extend(words_arr)
print(all_words)
```
![image](https://github.com/user-attachments/assets/6ffb6adb-1d3c-4c9d-a449-97fa45bf004d)


🗃️ 단어별 빈도수 확인
```python
all_words_df = pd.DataFrame({"words":all_words, "count":len(all_words)*[1]})
all_words_df = all_words_df.groupby("words").sum()
all_words_df.sort_values("count",ascending=False).head()
```
![image](https://github.com/user-attachments/assets/a896c998-3bff-46c8-ba57-6f8c8cf86f04)


🔎 제외 키워드는 계속해서 발견될 수 있기 때문에 지속적으로 추가해야 함. 여기서는 앞으로 나오는 추가 단어는 무시함.


## <span style= 'background-color: #f1f8ff'>10-8: 고객만족도와 자주 나오는 단어의 관계를 살펴보자
🗃️ 고객만족도 추출
```python
stop_words = ["더","수","좀"]
all_words = []
satisfaction = []
parts = ["Noun"]
for n in range(len(survey)):
    text = survey["comment"].iloc[n]
    words = twt.pos(text)
    words_arr = []
    for i in words:
        if i == "EOS" or i == "": continue
        word_tmp = i[0]
        part = i[1]
        if not (part in parts):continue
        if word_tmp in stop_words:continue
        words_arr.append(word_tmp)
        satisfaction.append(survey["satisfaction"].iloc[n])
    all_words.extend(words_arr)
all_words_df = pd.DataFrame({"words":all_words, "satisfaction":satisfaction, "count":len(all_words)*[1]})
all_words_df.head()
```
![image](https://github.com/user-attachments/assets/d4e5e652-41ba-4333-9767-8c254f352aa1)


🗃️ 단어별 만족도 집계
```python
words_satisfaction = all_words_df.groupby("words").mean()["satisfaction"]
words_count = all_words_df.groupby("words").sum()["count"]
words_df = pd.concat([words_satisfaction, words_count], axis=1)
words_df.head()
```
![image](https://github.com/user-attachments/assets/57c21f58-5b0c-4c5d-97b4-f8f5b3a37c02)


🗃️ 다수 의견 정리
```python
words_df = words_df.loc[words_df["count"]>=3]
words_df.sort_values("satisfaction", ascending=False).head()

words_df.sort_values("satisfaction").head()
```
![image](https://github.com/user-attachments/assets/2d765dd9-3c18-4096-a6d7-4e7ddd64b6c8)

![image](https://github.com/user-attachments/assets/bc97e633-effa-4988-83af-381a25572610)


## <span style= 'background-color: #f1f8ff'>10-9: 의견을 특징으로 표현해 보자
🗃️ 의견 특징 작성
```python
all_words_df = pd.DataFrame()
satisfaction = []
parts = ["Noun"]
for n in range(len(survey)):
    text = survey["comment"].iloc[n]
    words = twt.pos(text)
    words_df = pd.DataFrame()
    for i in words:
        if i == "EOS" or i == "": continue
        word_tmp = i[0]
        part = i[1]
        if not (part in parts):continue
        words_df[word_tmp] = [1]
    all_words_df = pd.concat([all_words_df, words_df], ignore_index=True)
all_words_df.head()
```
![image](https://github.com/user-attachments/assets/1236143d-fde3-4497-bf7b-63de5e30920c)


🗃️ 결측치 처리
```python
all_words_df = all_words_df.fillna(0)
all_words_df.head()
```
![image](https://github.com/user-attachments/assets/860d9449-b5e2-4e21-9e2d-54c453ca5344)


## <span style= 'background-color: #f1f8ff'>10-10: 비슷한 설문지를 찾아보자
🗃️ 타깃 의견 추출
```python
print(survey["comment"].iloc[2])
target_text = all_words_df.iloc[2]
print(target_text)
```
![image](https://github.com/user-attachments/assets/384ffecd-c347-44db-87a3-385e22cf9637)


🗃️ 유사도 검색: 문서의 유사도를 지표로 하는 대표적인 수법인 코사인 유사도를 이용.
```python
import numpy as np
cos_sim = []
for i in range(len(all_words_df)):
    cos_text = all_words_df.iloc[i]
    cos = np.dot(target_text, cos_text) / (np.linalg.norm(target_text) * np.linalg.norm(cos_text))
    cos_sim.append(cos)
all_words_df["cos_sim"] = cos_sim
all_words_df.sort_values("cos_sim",ascending=False).head()
```
![image](https://github.com/user-attachments/assets/4f170789-4aba-44f2-a8ff-84a8fdf94803)


### 출처 : 파이썬 데이터분석 실무 테크닉 100