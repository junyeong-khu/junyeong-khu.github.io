---
layout: post
title: "파이썬 데이터분석 실무 테크닉 100 : 7. 물류 네트워크 최적 설계를 위한 테크닉 10"
date: 2024-10-05 03:01:45 +0900
categories: 파이썬_데이터분석_실무_테크닉_100
---
## <span style= 'background-color: #f1f8ff'>고객의 소리
🗣️ 창고에서 공장까지의 운송 비용을 조정하는 것만으로도 최적화 가능성이 보였습니다. 계속해서 분석을 부탁드립니다. 이왕이면 우리 회사의 제조에서 물류까지의 전체 흐름 중 어디에 비용 개선 가능성이 있는지 분석해 주셨으면 합니다.


## <span style= 'background-color: #f1f8ff'>7-0: 전제조건
💡 이 기업이 다루는 물류의 전체 모습은 그림 7-1과 같은 물류 네트워크입니다. 최종적으로 제품을 판매하는 대리점(P,Q)이 있고 거기에 판매되는 상품군(제품 A,B)에는 일정 수요가 예측되어 있어, 이 수요량을 근거로 공장(공장 X,Y)에서의 생산량을 결정합니다. 각각 제품을 어느 공장의 어느 생산라인(레인 0,1)에서 제조할지에 대해서는 각 공장에서 대리점으로까지의 운송비, 제고 비용 등을 고려해서 결정합니다.
![image](https://github.com/user-attachments/assets/f1d19564-4071-4325-98dc-78a82cc3c27f)


## <span style= 'background-color: #f1f8ff'>7-1: 운송 최적화 문제를 풀어보자
🗃️ 최적화 문제 해결 코드: 최적화 모델을 작성하는 라이브러리인 pulp와 목적함수를 생성해서 최적화 문제를 푸는 라이브러리인 ortoolpy를 이용하여 코드 작성.
```python
import numpy as np
import pandas as pd
from itertools import product
from pulp import LpVariable, lpSum, value
from ortoolpy import model_min, addvars, addvals

#데이터 불러오기 
df_tc = pd.read_csv('trans_cost.csv', index_col="공장")
df_demand = pd.read_csv('demand.csv')
df_supply = pd.read_csv('supply.csv')

#초기 설정
np.random.seed(1)
nw = len(df_tc.index)
nf = len(df_tc.columns)
pr = list(product(range(nw), range(nf)))

#수리 모델 작성
m1 = model_min()
v1 = {(i,j):LpVariable('v%d_%d'%(i,j),lowBound=0) for i,j in pr}

m1 += lpSum(df_tc.iloc[i][j]*v1[i,j] for i,j in pr)
for i in range(nw):
    m1 += lpSum(v1[i,j] for j in range(nf)) <= df_supply.iloc[0][i]
for j in range(nf):
    m1 += lpSum(v1[i,j] for i in range(nw)) >= df_demand.iloc[0][j]
m1.solve()

#총 운송 비용 계산
df_tr_sol = df_tc.copy()
total_cost = 0
for k,x in v1.items():
    i,j = k[0],k[1]
    df_tr_sol.iloc[i][j] = value(x)
    total_cost += df_tc.iloc[i][j]*value(x)

print(df_tr_sol)
print("총 운송 비용:"+str(total_cost))
```
![image](https://github.com/user-attachments/assets/186e1a14-c0f8-4cd6-94a0-90c7b7e5bd83)


## <span style= 'background-color: #f1f8ff'>7-2: 최적 운송 경로를 네트워크로 확인하자
🗃️ 운송 경로 네트워크 가시화
```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx

#데이터 불러오기
dt_tr = df_tr_sol.copy()
df_pos = pd.read_csv('trans_route_pos.csv')

#객체 생성
G = nx.Graph()

#노드 설정
for i in range(len(df_pos.columns)):
    G.add_node(df_pos.columns[i])

#엣지 설정 및 엣지의 가중치 리스트화
num_pre = 0
edge_weights = []
size = 0.1
for i in range(len(df_pos.columns)):
    for j in range(len(df_pos.columns)):
        if not (i==j):
            #엣지 추가
            G.add_edge(df_pos.columns[i],df_pos.columns[j])
            #엣지 가중치 추가
            if num_pre<len(G.edges):
                num_pre = len(G.edges)
                weight = 0
                if (df_pos.columns[i] in df_tr.columns)and(df_pos.columns[j] in df_tr.index):
                    if df_tr[df_pos.columns[i]][df_pos.columns[j]]:
                        weight = df_tr[df_pos.columns[i]][df_pos.columns[j]]*size
                elif(df_pos.columns[j] in df_tr.columns)and(df_pos.columns[i] in df_tr.index):
                    if df_tr[df_pos.columns[j]][df_pos.columns[i]]*size
                edge_weights.append(weight)

#좌표 설정
pos = {}
for i in range(len(df_pos.columns)):
    node = df_pos.columns[i]
    pos[node] = (df_pos[node][0],df_pos[node][1])

#그리기
nx.draw(G, pos, with_labels=True,font_size=16, node_size = 1000, node_color='k', font_color='w', width=edge_weights)

#표시
plt.show()
```
![image](https://github.com/user-attachments/assets/ec6b4a02-19ca-43f3-bc3d-e74de1823861)

🔎 창고 W1에서 공장 F1으로, 창고 W2에서 공장 F3로, 창고 W3에서 공장 F2, F4로의 공급이 대부분이고 그 외의 공급은 최소한으로 제한됨. => "운송 경로는 어느 정도 집중돼야 한다." 가설은 참.


## <span style= 'background-color: #f1f8ff'>7-3: 최적 운송 경로가 제약 조건을 만족하는지 확인하자
🗃️ 제약 조건 만족 여부 확인
```python
import pandas as pd
import numpy as np

#데이터 불러오기
df_demand = pd.read_csv('demand.csv')
df_supply = pd.read_csv('supply.csv')

#제약 조건 계산 함수
#수요측
def condition_demand(df_tr,df_demand):
    flag = np.zeros(len(df_demand.columns))
    for i in range(len(df_demand.columns)):
        temp_sum = sum(df_tr[df_demand.columns[i]])
        if (temp_sum>=df_demnad.iloc[0][i]):
            flag[i] = 1
    return flag

#공급측
def condition_supply(df_tr,df_supply):
    flag = np.zeros(len(df_supply.columns))
    for i in range(len(df_supply.columns)):
        temp_sum = sum(df_tr.loc[df_supply.columns[i]])
        if temp_sum<=df_supply.iloc[0][i]:
            flag[i] = 1
    return flag

print("수요 조건 계산 결과:"+str(condition_demand(df_tr_sol,df_demand)))
print("공급 조건 계산 결과:"+str(condition_supply(df_tr_sol,df_supply)))
```
수요 조건 계산 결과:[1. 1. 1. 1.]
공급 조건 계산 결과:[1. 1. 1.]


## <span style= 'background-color: #f1f8ff'>7-4: 생산 계획 데이터를 불러오자
![image](https://github.com/user-attachments/assets/099bbf67-648d-4e41-9b9c-c4ae3a7c49c0)

🗃️ 생산 계획 데이터 리딩
```python
import pandas as pd

df_material = pd.read_csv('product_plan_material.csv', index_col="제품")
print(df_material)
df_profit = pd.read_csv('product_plan_profit.csv', index_col="제품")
print(df_profit)
df_stock = pd.read_csv('product_plan_stock.csv', index_col="항목")
print(df_stock)
df_plan = pd.read_csv('product_plan.csv', index_col="제품")
print(df_plan)
```
![image](https://github.com/user-attachments/assets/bfa149a7-edc0-48ea-9bd8-0f4cf938bab7)

🔎 현재는 이익이 큰 제품1만 생산하고 있으며, 제품2는 생산하지 않고 있음. => 원료가 효과적으로 사용되지 않고 있기 때문에 제품2의 생산량을 늘린다면 이익을 높일 수 있을 것.


## <span style= 'background-color: #f1f8ff'>7-5: 이익을 계산하는 함수를 만들자
🔎 생산 최적화 해결 방법: 최적화 문제의 일반적인 흐름과 동일. 즉 목적함수와 제약 조건을 정의하고 제약 조건 아래서 목적함수를 최소화(또는 최대화)하는 변수의 조합을 찾는 것.

🗃️ 이익 계산 함수 정의
```python
def product_plan(df_profit,df_plan):
    profit = 0
    for i in range(len(df_profit.index)):
        for j in range(len(df_plan.columns)):
            profit += df_profit.iloc[i][j]*df_plan.iloc[i][j]
        return profit

print("총 이익:"+str(product_plan(df_profit,df_plan)))
```
총 이익:80.0


## <span style= 'background-color: #f1f8ff'>7-6: 생산 최적화 문제를 풀어보자
🗃️ 생산 최적화 문제 해결
```python
import pandas as pd
from pulp import LpVariable, lpSum, value
from ortoolpy import model_max, addvars, addvals

df = df_material.copy()
inv = df_stock

m = model_max()
v1 = {(i):LpVariable('v%d'%(i),lowBound=0) for i in range(len(df_profit))}
m += lpSum(df_profit.iloc[i]*v1[i] for i in range(len(df_profit)))
for i in range(len(df_material.columns)):
    m += lpSum(df_material.iloc[j,i]*v1[j] for j in range(len(df_profit))) <= df_stock.iloc[:,i]
m.solve()

df_plan_sol = df_plan.copy()
for k,x in v1.items():
    df_plan_sol.iloc[k] = value(x)
print(df_plan_sol)
print("총 이익:"+str(value(m.objective)))
```
![image](https://github.com/user-attachments/assets/4fe19c6d-9e66-4288-be82-f7b45037441b)


## <span style= 'background-color: #f1f8ff'>7-7: 최적 생산 계획이 제약 조건을 만족하는지 확인하자
🔎 최적화 문제에서는 결과를 이해하는 것이 중요. 생산 최적화에 있어 결과를 이해하는 방법에는 제약 조건을 만족하는지 확인하는 방법이 있음.

🗃️ 제약 조건 만족 여부 확인
```python
def condition_stock(df_plan, df_material, df_stock):
    flag = np.zeros(len(df_material.columns))
    for i in range(len(df_material.columns)):
        temp_sum = 0
        for j in range(len(df_material.index)):
            temp_sum = temp_sum + df_material.iloc[j][i]*float(df_plan.iloc[j])
        if (temp_sum<=float(df_stock.iloc[0][i])):
            flag[i] = 1
        print(df_material.columns[i]+" 사용량:"+str(temp_sum)+", 재고:"+str(float(df_stock.iloc[0][i])))
    return flag

print("제약 조건 계산 결과:"+str(condition_stock(df_plan_sol,df_material,df_stock)))
```
![image](https://github.com/user-attachments/assets/e88120a8-cb0c-464e-ae4f-82fc7e5423c0)


## <span style= 'background-color: #f1f8ff'>7-8: 물류 네트워크 설계 문제를 풀어보자
🔎 물류 네트워크에는 제품을 판매하는 대리점이 있고, 거기에서 판매되는 상품군에는 일정의 수요가 예측돼 있으며, 그 수요량을 근거로 공장에서의 생산량을 결정함. 각 제품을 어느 공장의 어떤 생산라인에서 제조할지는 각 공장에서 대리점까지의 운송 비용 및 제조 비용 등을 고려해서 결정해야 하기에 실제 물류 네트워크는 운송 경로와 생산 계획 최적화 문제를 동시에 고려해야 함.
![image](https://github.com/user-attachments/assets/e68401ca-8ff3-42bd-819b-bebb335ae6c8)

🗃️ 물류 네트워크 최적 설계
```python
import numpy as np
import pandas as pd

제품 = list('AB')
수요지 = list('PQ')
공장 = list('XY')
레인 = (2,2)

#운송비
tbdi = pd.DataFrame(((j,k) for j in 수요지 for k in 공장), columns=['수요지','공장'])
tbdi['운송비'] = [1,2,3,1]
print(tbdi)

#수요
tbde = pd.DataFrame(((j,i) for j in 수요지 for i in 제품), columns=['수요지','제품'])
tbde['수요'] = [10,10,20,20]
print(tbde)

#생산
tbfa = pd.DataFrame(((k,l,i,0,np.inf) for k,nl in zip (공장,레인) for l in range(nl) for i in 제품), columns=['공장','레인','제품','하한','상한'])
tbfa['생산비'] = [1,np.nan,np.nan,1,3,np.nan,5,3]
tbfa.dropna(inplace=True)
tbfa.loc[4,'상한']=10
print(tbfa)

from ortoolpy import logistics_network
_, tbdi2, _ = logistics_network(tbde, tbdi, tbfa,dep = "수요지", dem = "수요", fac = "공장", prd = "제품", tcs = "운송비", pcs = "생산비", lwb = "하한", upb = "상한")

print(tbfa)
print(tbdi2)
```
![image](https://github.com/user-attachments/assets/dcfe59bd-d5e4-477d-a7d9-0659f62fd4f9)


## <span style= 'background-color: #f1f8ff'>7-9: 최적 네트워크의 운송 비용과 그 내역을 계산하자
🗃️ 운송 비용 계산
```python
tbdi2 = tbdi2[["공장", "대리점", "운송비", "제품", "VsrX", "ValX"]]
tbdi2
```
![image](https://github.com/user-attachments/assets/99d03e8c-9cbe-49c5-8ddc-b153b5d988da)

```python
trans_cost = 0
for i in range(len(tbdi2.index)):
    trans_cost += tbdi2["운송비"].iloc[i]*tbdi2["ValX"].iloc[i]
print("총 운송비:"+str(trans_cost))
```
총 운송비:80.0


## <span style= 'background-color: #f1f8ff'>7-10: 최적 네트워크의 생산 비용과 그 내역을 계산하자
🗃️ 생산 비용 계산
```python
print(tbfa)
product_cost = 0
for i in range(len(tbfa.index)):
    product_cost += tbfa["생산비"].iloc[i]*tbfa["ValY"].iloc[i]
print("총 생산비:"+str(product_cost))
```
![image](https://github.com/user-attachments/assets/9461fe98-14e8-4f8b-8f16-dcb57752f3de)
총 생산비:120.0


### 출처 : 파이썬 데이터분석 실무 테크닉 100