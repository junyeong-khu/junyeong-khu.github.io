---
layout: post
title: "파이썬 데이터분석 실무 테크닉 100 : 8. 수치 시뮬레이션으로 소비자의 행동을 예측하는 테크닉 10"
date: 2024-10-08 03:01:45 +0900
categories: 파이썬_데이터분석_실무_테크닉_100
---
## <span style= 'background-color: #f1f8ff'>고객의 소리
🗣️ 물류 비용 개선에서 다양한 것을 알 수 있었고, 계속해서 분석을 부탁드립니다. 이번에는 우리 회사 제품의 판매를 예측할 수 있는지를 검토해줬으면 합니다. 우리 제품은 대대적인 홍보를 하지는 않지만, 거의 SNS를 통해 입소문을 타고 퍼지고 있습니다. 재구매 고객은 우리와 SNS로 연결돼 있어 파악이 가능합니다. 이것을 이용해 앞으로의 매출을 예측할 수 있을까요?


## <span style= 'background-color: #f1f8ff'>8-0: 전제조건
💡 재구매 고객 20명의 SNS 연결 상태가 links.csv에 저장돼 있습니다. 연결이 있으면 1, 없으면 0입니다. 마찬가지로 모든 재구매 고객 540명의 SNS 연결 상태는 links_members.csv에 저장돼 있습니다. info_members.csv에는 모든 재구매 고객 540명의 2년간 매월 이용 현황이 저장돼 있습니다. 이용 실적이 있는 달은 1로, 없는 달은 0으로 기록돼 있습니다.
![image](https://github.com/user-attachments/assets/8c8d31b5-15e3-4742-9d31-63237806b831)


## <span style= 'background-color: #f1f8ff'>8-1: 인간관계 네트워크를 가시화해 보자
🗃️ 데이터 리딩
```python
import pandas as pd
df_links = pd.read_csv("links.csv")
```
![image](https://github.com/user-attachments/assets/81f40659-90ec-4934-a335-f55ecff6990e)

🗃️ 네트워크 가시화
```python
import networkx as nx
import matplotlib.pyplot as plt

#그래프 객체 생성
G = nx.Graph()

#노드 설정
NUM = len(df_links.index)
for i in range(1,NUM+1):
    node_no = df_links.columns[i].strip("Node")
    G.add_node(str(node_no))

#엣지 설정
for i in range(NUM):
    for j in range(NUM):
        node_name = "Node" + str(j)

        if df_links[node_name].iloc[i]==1:
            G.add_edge(str(i),str(j))

#그리기
nx.draw_networkx(G,node_color="k", edge_color="k", font_color="w")
plt.show()
```
![image](https://github.com/user-attachments/assets/ceddef69-47e2-49da-a316-894f3940f9a3)

🔎 draw_networkx: 다른 것과 연결이 많은 노드를 중심에 오게 자동으로 위치를 결정해서 가시화함. 재현성이 없어서 실행할 때마다 다른 그래프가 표시될 수도 있음.


## <span style= 'background-color: #f1f8ff'>8-2: 입소문에 의한 정보 전파 모습을 가시화해 보자
🗃️ 정보 전파 시뮬레이션
```python
import numpy as np

#입소문 전파 여부의 확률적 결정
def determine_link(percent):
    rand_val = np.random.rand()
    if rand_val<=percent:
        return 1
    else:
        return 0

#입소문 시뮬레이션
def simulate_percolation(num, list_active, percent_percolation):
    for i in range(num):
        if list_active[i]==1:
            for j in range(num):
                node_name = "Node" + str(j)
                if df_links[node_name].iloc[i]==1:
                    if determine_link(percent_percolation)==1:
                        list_active[j] = 1
    return list_active

percent_percolation = 0.1
T_NUM = 36
NUM = len(df_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1

list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_percolation(NUM, list_active, percent_percolation)
    list_timeSeries.append(list_active.copy())
```

🗃️ 정보 전파 가시화
```python
def active_node_coloring(list_active):
    list_color = []
    for i in range(len(list_timeSeries[t])):

        if list_timeSeries[t][i]==1:
            list_color.append("r")
        else:
            list_color.append("k")
    return list_color

t = 0 #1개월 후
nx.draw_networkx(G,font_color="w",node_color=active_node_coloring(list_timeSeries[t]))
plt.show()
```
![image](https://github.com/user-attachments/assets/dd07f326-9c3c-4346-b587-06e7c2c7e802)

```python
t = 11 #12개월 후
nx.draw_networkx(G,font_color="w",node_color=active_node_coloring(list_timeSeries[t]))
plt.show()
```
![image](https://github.com/user-attachments/assets/e0beecbb-dc9b-45b6-8038-47f33bb8a9b5)

```python
t = 35 #36개월 후
nx.draw_networkx(G,font_color="w",node_color=active_node_coloring(list_timeSeries[t]))
plt.show()
```
![image](https://github.com/user-attachments/assets/9e6c8af3-1bf3-4ef0-9a55-fd90e0dc62cf)

🔎 active_node_coloring: 입소문이 전파된 노드는 빨간색으로, 아직 전파되지 않은 노드는 검은색으로 색칠하는 함수.


## <span style= 'background-color: #f1f8ff'>8-3: 입소문 수의 시계열 변화를 그래프화해 보자
🗃️ 입소문 수 시계열 표시
```python
list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

plt.plot(list_timeSeries_num)
plt.show()
```
![image](https://github.com/user-attachments/assets/d899d249-9834-41da-b3a9-dca01655752b)

🔎 확률적 계산이기에 각자 계산 결과가 다를 수 있지만, 서서히 전파되어 전원에게 전파되는 모습이 확인되면 됨.


## <span style= 'background-color: #f1f8ff'>8-4: 회원 수의 시계열 변화를 시뮬레이션해 보자
🗃️ 회원 수 시계열 변화 시뮬레이션: 스포츠 센터의 데이터 이용.
```python
def simulate_population(num, list_active, percent_percolation, percent_disapparence, df_links):
    #확산
    for i in range(num):
        if list_active[i]==1:
            for j in range(num):
                if df_links.iloc[i][j]==1:
                    if determine_link(percent_percolation)==1:
                        list_active[j] = 1
    #소멸
    for i in range(num):
        if determine_link(percent_disapparence)==1:
            list_active[i] = 0
    return list_active

percent_percolation = 0.1
percent_disapparence = 0.05
T_NUM = 100
NUM = len(df_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1

list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence,df_links)
    list_timeSeries.append(list_active.copy())

#시계열 그래프 그리기
list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

plt.plot(list_timeSeries_num)
plt.show()
```
![image](https://github.com/user-attachments/assets/13ddc97e-b08e-4282-8396-f2d0e009b2fd)

🔎 스포츠 센터의 회원은 어느 날 갑자기 이용하지 않을 수도 있기 때문에 '소멸'이라는 조작이 추가됨. 이로 인해 회원의 증가와 감소가 반복되면서 서서히 100%의 이용률을 향해감.


## <span style= 'background-color: #f1f8ff'>8-5: 파라미터 전체를 '상관관계'를 보면서 파악해 보자
🗃️ 파라미터 전체 파악: 입소문 전파와 이용 중단이 일어날 확률은 상품이나 서비스의 성질, 캠페인 유무 등에 따라 달라짐. 그리고 이 확률이 상품의 보급에 어떻게 영향을 주는지가 중요함. 이런 보급의 모습을 파악하기 위해 '상관관계'를 그려 파악.
```python
T_NUM = 100
NUM_PhaseDiagram = 20
phaseDiagram = np.zeros((NUM_PhaseDiagram,NUM_PhaseDiagram))
for i_p in range(NUM_PhaseDiagram):
    for i_d in range(NUM_PhaseDiagram):
        percent_percolation = 0.05*i_p
        percent_disapparence = 0.05*i_d
        list_active = np.zeros(NUM)
        list_active[0] = 1
        for t in range(T_NUM):
            list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence, df_links)
        phaseDiagram[i_p][i_d] = sum(list_active)
print(phaseDiagram)
```
![image](https://github.com/user-attachments/assets/a1a8b2ff-43a9-41af-820f-ba1b5a906bf5)

🔎 소멸의 확률이 20~30%를 넘으면 아무리 입소문 확률이 높더라도 이용자는 증가하지 않음.


## <span style= 'background-color: #f1f8ff'>8-6: 실제 데이터를 불러와보자
🗃️ 데이터 리딩
```python
df_mem_links = pd.read_csv("links_members.csv")
df_mem_info = pd.read_csv("info_members.csv")
```
![image](https://github.com/user-attachments/assets/5213ba9f-e95a-4c5f-9a32-247d338a760b)


## <span style= 'background-color: #f1f8ff'>8-7: 링크 수의 분포를 가시화해 보자
🗃️ 링크 수 분포 가시화: 540명이라는 규모는 네트워크를 가시화해도 노드가 밀집해서 네트워크의 상황을 파악하기 어렵기 때문에 다른 방법 이용.
```python
NUM = len(df_mem_links.index)
array_linkNum = np.zeros(NUM)
for i in range(NUM):
    array_linkNum[i] = sum(df_mem_links["Node"+str(i)])
plt.hist(array_linkNum, bins=10, range=(0,250))
plt.show()
```
![image](https://github.com/user-attachments/assets/5c82c419-a1e1-4c05-b13b-49f003ed7064)

🔎 이 분포는 거의 모든 노드가 어느 정도의 링크 수를 가지고 있는 분포이기 때문에 '급격히 입소문이 퍼지지 않는' 대신에 '허브에 의존하지 않고 입소문이 퍼지기 쉽다'라고 말할 수 있음.


## <span style= 'background-color: #f1f8ff'>8-8: 시뮬레이션을 위해 실제 데이터로부터 파라미터를 추정하자
🗃️ 파라미터 추정: 시뮬레이션하기 위해서는 먼저 파라미터를 추정해야 함.
```python
NUM = len(df_mem_info.index)
T_NUM = len(df_mem_info.columns)-1

#소멸 확률 추정
count_active = 0
count_active_to_inactive = 0
for t in range(1,T_NUM):
    for i in range(NUM):
        if (df_mem_info.iloc[i][t]==1):
            count_active_to_inactive += 1
            if (df_mem_info.iloc[i][t+1]==0):
                count_active += 1
estimated_percent_disapparence = count_active/count_active_to_inactive

#확산 확률 추정
count_link = 0
count_link_to_active = 0
count_link_temp = 0
for t in range(T_NUM-1):
    df_link_t = df_mem_info[df_mem_info[str(t)]==1]
    temp_flag_count = np.zeros(NUM)
    for i in range(len(df_link_t.index)):
        df_link_temp = df_mem_links[df_mem_links["Node"+str(df_link_t.index[i])]==1]
        for j in range(len(df_link_temp.index)):
            if (df_mem_info.iloc[df_link_temp.index[j]][str(t)]==0):
                if (temp_flag_count[df_link_temp.index[j]]==0):
                    count_link += 1
                if (df_mem_info.iloc[df_link_temp.index[j]][str(t+1)]==1):
                    if (temp_flag_count[df_link_temp.index[j]]==0):
                        temp_flag_count[df_link_temp.index[j]] = 1
                        count_link_to_active += 1
estimated_percent_percolation = count_link_to_active/count_link
```


## <span style= 'background-color: #f1f8ff'>8-9: 실제 데이터와 시뮬레이션을 비교하자
🗃️ 시뮬레이션 실행
```python
percent_percolation = 0.025184661323275185
percent_disapparence = 0.10147163541419416
T_NUM = 24
NUM = len(df_mem_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1
list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence, df_mem_links)
    list_timeSeries.append(list_active.copy())
list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

T_NUM = len(df_mem_info.columns)-1
list_timeSeries_num_real = []
for t in range(0,T_NUM):
    list_timeSeries_num_real.append(len(df_mem_info[df_mem_info[str(t)]==1].index))

plt.plot(list_timeSeries_num, label = 'simulated')
plt.plot(list_timeSeries_num_real, label = 'real')
plt.xlabel('month')
plt.ylabel('population')
plt.legend(loc='lower right')
plt.show()
```
![image](https://github.com/user-attachments/assets/505f19f4-691f-44ab-8c22-a19ef5158ce2)

🔎 어느 지점에서 이용자가 급격히 증가하는지의 경향은 확인되지만, 프로그램 난수의 영향으로 증가하는 시간대나 시기에 오차가 생김. 이는 시뮬레이션 예측 정확도의 한계지만, 이 경향을 사전에 알아두면 정성적인 예측에 사용 가능. 정확도를 높이기 위해서는 같은 시뮬레이션을 여러 번 실행해서 평균값을 계산하는 것이 좋음.


## <span style= 'background-color: #f1f8ff'>8-10: 시뮬레이션으로 미래를 예측해 보자
🗃️ 시뮬레이터 실행: 실제 데이터와 시뮬레이션의 움직임을 비교하도록 만든 프로그램인 시뮬레이터를 실행.
```python
percent_percolation = 0.025184661323275185
percent_disapparence = 0.10147163541419416
T_NUM = 36
NUM = len(df_mem_links.index)
list_active = np.zeros(NUM)
list_active[0] = 1
list_timeSeries = []
for t in range(T_NUM):
    list_active = simulate_population(NUM, list_active, percent_percolation, percent_disapparence, df_mem_links)
    list_timeSeries.append(list_active.copy())
list_timeSeries_num = []
for i in range(len(list_timeSeries)):
    list_timeSeries_num.append(sum(list_timeSeries[i]))

plt.plot(list_timeSeries_num, label = 'simulated')
plt.xlabel('month')
plt.ylabel('population')
plt.legend(loc='lower right')
plt.show()
```
![image](https://github.com/user-attachments/assets/f951b017-5dfd-4664-8bf1-0a5aa41a29cc)




### 출처 : 파이썬 데이터분석 실무 테크닉 100